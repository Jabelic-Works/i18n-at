name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version type to bump"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      dry_run:
        description: "Dry run (no actual release)"
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24"
          registry-url: "https://registry.npmjs.org"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "10.12.4"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./packages/core/package.json').version")
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Check if version already exists on npm
        id: version_check
        run: |
          CURRENT_VERSION=$(node -p "require('./packages/core/package.json').version")
          
          # npmでバージョンをチェック
          if npm view i18n-at@$CURRENT_VERSION version 2>/dev/null; then
            echo "version_exists=true" >> $GITHUB_OUTPUT
            echo "⚠️ Version $CURRENT_VERSION already exists on npm"
          else
            echo "version_exists=false" >> $GITHUB_OUTPUT
            echo "✅ Version $CURRENT_VERSION is available"
          fi

      - name: Bump version
        id: version_bump
        run: |
          cd packages/core
          
          # 現在のバージョンが既にnpmに存在する場合は、強制的にバージョンアップ
          if [ "${{ steps.version_check.outputs.version_exists }}" = "true" ] && [ "${{ inputs.dry_run }}" = "false" ]; then
            echo "⚠️ Current version already exists on npm. Forcing version bump..."
          fi
          
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            NEW_VERSION=$(npm version ${{ inputs.version_type }} --no-git-tag-version --preid=beta)
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "🔍 Dry run - would bump to version: $NEW_VERSION"
            git checkout -- package.json
          else
            NEW_VERSION=$(npm version ${{ inputs.version_type }} --no-git-tag-version)
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "✅ Version bumped to: $NEW_VERSION"
            
            # 新しいバージョンがnpmに既に存在するかチェック
            NEW_VERSION_CLEAN=$(echo $NEW_VERSION | sed 's/^v//')
            if npm view i18n-at@$NEW_VERSION_CLEAN version 2>/dev/null; then
              echo "❌ Error: New version $NEW_VERSION already exists on npm!"
              echo "Please choose a different version type or manually update the version."
              exit 1
            fi
          fi

      - name: Update root package.json version
        if: ${{ !inputs.dry_run }}
        run: |
          CORE_VERSION=$(node -p "require('./packages/core/package.json').version")
          node -e "
            const fs = require('fs');
            const pkg = require('./package.json');
            pkg.version = '$CORE_VERSION';
            fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
          "

      - name: Commit version changes
        if: ${{ !inputs.dry_run }}
        run: |
          git add packages/core/package.json package.json
          git commit -m "chore: bump version to ${{ steps.version_bump.outputs.new_version }}"

      - name: Create Git tag
        if: ${{ !inputs.dry_run }}
        run: |
          TAG_NAME="${{ steps.version_bump.outputs.new_version }}"
          git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
          git push origin HEAD --tags

      - name: Create GitHub Release
        if: ${{ !inputs.dry_run }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version_bump.outputs.new_version }}
          release_name: Release ${{ steps.version_bump.outputs.new_version }}
          body: |
            ## Changes in ${{ steps.version_bump.outputs.new_version }}

            * Automated release from ${{ steps.current_version.outputs.current }} to ${{ steps.version_bump.outputs.new_version }}

            For detailed changes, see the commit history.
          draft: false
          prerelease: false

      - name: Check if new version exists on npm
        if: ${{ !inputs.dry_run }}
        id: final_version_check
        run: |
          NEW_VERSION_CLEAN=$(echo "${{ steps.version_bump.outputs.new_version }}" | sed 's/^v//')
          if npm view i18n-at@$NEW_VERSION_CLEAN version 2>/dev/null; then
            echo "should_publish=false" >> $GITHUB_OUTPUT
            echo "⚠️ Version $NEW_VERSION_CLEAN already exists on npm. Skipping publish."
          else
            echo "should_publish=true" >> $GITHUB_OUTPUT
            echo "✅ Version $NEW_VERSION_CLEAN is ready to publish."
          fi

      - name: Publish to npm
        if: ${{ !inputs.dry_run && steps.final_version_check.outputs.should_publish == 'true' }}
        run: |
          cd packages/core
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Skip publish (version exists)
        if: ${{ !inputs.dry_run && steps.final_version_check.outputs.should_publish == 'false' }}
        run: |
          echo "⚠️ Skipping npm publish as version already exists."
          echo "The Git tag and GitHub release will still be created."

      - name: Summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "* **Previous version:** ${{ steps.current_version.outputs.current }}" >> $GITHUB_STEP_SUMMARY
          echo "* **New version:** ${{ steps.version_bump.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Version type:** ${{ inputs.version_type }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Dry run:** ${{ inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "* **Status:** 🔍 Dry run completed - no changes made" >> $GITHUB_STEP_SUMMARY
          else
            echo "* **Status:** ✅ Release completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "* **GitHub Release:** [Release ${{ steps.version_bump.outputs.new_version }}](https://github.com/${{ github.repository }}/releases/tag/${{ steps.version_bump.outputs.new_version }})" >> $GITHUB_STEP_SUMMARY
            echo "* **npm Package:** [i18n-at@${{ steps.version_bump.outputs.new_version }}](https://www.npmjs.com/package/i18n-at)" >> $GITHUB_STEP_SUMMARY
          fi
